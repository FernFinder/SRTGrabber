import requests

class subtitleCollector:
    def __init__(self):
        self.subtitleDict = {}
        self.htmlContent = ""

    def clean_SubtitleLink(self, subtitleLink):
        while subtitleLink.find("\\u0026") != -1:
            subtitleLink = subtitleLink.replace("\\u0026", "&")
            subtitleLink += "&fmt=vtt"
        return subtitleLink

    def get_Subtitles(self):
        if self.htmlContent == "":
            print("Error: Looking for Subtitles requires HTML content to be found first.")
            exit(0)
        while self.htmlContent.find('timedtext') != -1:
            index = self.htmlContent.find('timedtext')
            self.htmlContent = self.htmlContent[index-28:]
            index = self.htmlContent.find('"')
            subtitleLink = self.clean_SubtitleLink(self.htmlContent[0:index])
            if(self.check_Autogenerated(subtitleLink)):
                self.subtitleDict[subtitleLink[:-8]] = subtitleLink[-10:-8] + " [Autogenerated]"
                response = requests.get(subtitleLink[:-8])
            else:
                self.subtitleDict[subtitleLink] = subtitleLink[-10:-8]
                response = requests.get(subtitleLink)

            self.htmlContent = self.htmlContent[index:]

    def get_HTMLContent(self, videoLink):
        self.videoCode = self.get_VideoCode(videoLink)
        response = requests.get('https://www.youtube.com/watch?v=' + self.videoCode)
        self.htmlContent = response.text
    
    def get_VideoCode(self, URL):
        #Entering in just the video code is fine
        if len(URL) == 11:
            return URL
        #For URLS look for watch?v= and then get code from there
        index = URL.find("watch?v=")
        if index != -1:
            return URL[index+8:index+19]
    
    def check_Autogenerated(self, subtitleLink):
        response = requests.get(subtitleLink)
        if(response.text.find("start position:0%") != -1):
            return True
        else:
            return False