import requests

class Transcript_to_SRT:

    SRT = ""

    def __init__(self, transcriptURL):
        self.get_transcript(transcriptURL)
        self.fix_ApostrophyArtifacts()
        self.create_SRT()

    def get_transcript(self, transcriptURL):
        response = requests.get(transcriptURL)
        self.transcript = response.text
        self.fix_ApostrophyArtifacts()

    def fix_ApostrophyArtifacts(self):
        self.transcript = self.transcript.replace('&amp;#39;','\'')
    
    def create_SRT(self):
        transcriptCopy = self.transcript
        index = transcriptCopy.find("<text")        
        subtitleCount = 1

        while index != -1:
            ##### TIME STAMP GENERATION #####
            #Get subtitle timestamp info
            subtitleDurationStart = transcriptCopy.find("dur=")
            subtitleDurationEnd = transcriptCopy.find("\">")
            subtitleTextEnd = transcriptCopy.find("</text>")


            #Autogenerated captions can have no duration, this section of code checks for that
            if(subtitleDurationStart > subtitleTextEnd or subtitleDurationStart == -1):
                subtitleTimeStart = float(transcriptCopy[index+13:subtitleDurationEnd])
                subtitleDuration = 0
            else:
                subtitleTimeStart = float(transcriptCopy[index+13:subtitleDurationStart-2])
                subtitleDuration = float(transcriptCopy[subtitleDurationStart+5:subtitleDurationEnd])

            subtitleTimeEnd = subtitleTimeStart + subtitleDuration
            timestamp = self.create_Timestamp(subtitleTimeStart, subtitleTimeEnd)

            ##### TEXT GETTER #####

            text = transcriptCopy[subtitleDurationEnd+2:subtitleTextEnd] + "\n"

            # Get next line of transcipt
            transcriptCopy = transcriptCopy[subtitleTextEnd+7:]
            index = transcriptCopy.find("<text")

            # Write to SRT
            self.SRT += str(subtitleCount) + "\n"+ timestamp + text + "\n"
            subtitleCount += 1

    def create_Timestamp(self, subtitleTimeStart, subtitleTimeEnd):
        # Create Starting Timestamp
        hours = subtitleTimeStart // 3600
        subtitleTimeStart %= 3600
        minutes = subtitleTimeStart // 60
        subtitleTimeStart %= 60

        timestampStart = str("%02d" % hours + ":" + "%02d" % minutes + ":" +  '%06.3f' % subtitleTimeStart)
        timestampStart = timestampStart.replace('.',',')

        # Create Ending Timestamp
        hours = subtitleTimeEnd // 3600
        subtitleTimeEnd %= 3600
        minutes = subtitleTimeEnd // 60
        subtitleTimeEnd %= 60

        timestampEnd = str("%02d" % hours + ":" + "%02d" % minutes + ":" +  '%06.3f' % subtitleTimeEnd)
        timestampEnd = timestampEnd.replace('.',',')

        # Return finished result
        return str(timestampStart) + " --> " + str(timestampEnd) + "\n"
    
    def get_SRT(self):
        return self.SRT